import math
from inspect import getmembers
from pprint import pprint

#-------------------------------------------------------------------------------
class Point:
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self,x,y,z):
	#---------------------------------------------------------------------------
		self.x = x
		self.y = y
		self.z = z
#-------------------------------------------------------------------------------
class _3DPrintable:
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def toCSG(self):
	#---------------------------------------------------------------------------
		raise NotImplementedError('subclasses must override toCSG()!')
#-------------------------------------------------------------------------------
class Sphere(_3DPrintable):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self,center, radius):
	#---------------------------------------------------------------------------
		self.center = center
		self.radius = radius
	#---------------------------------------------------------------------------
	def toCSG():
	#---------------------------------------------------------------------------
		# TODO
		pass
#-------------------------------------------------------------------------------
class Cylinder(_3DPrintable):
	#---------------------------------------------------------------------------
	def __init__(self,origin, end, radius):
	#---------------------------------------------------------------------------
		self.center = origin
		self.end = end
		self.radius = radius
	#---------------------------------------------------------------------------
	def toCSG():
	#---------------------------------------------------------------------------
		# TODO
		pass
		# cylinder($fn = 0, $fa = 12.000000, $fs = 2.000000, h = 20.0, r1 = 2.0, r2 = 2.0, center = false);
#-------------------------------------------------------------------------------
class _3DGeometric(_3DPrintable):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def vertices(self):
	#---------------------------------------------------------------------------
		raise NotImplementedError('subclasses must override toCSG()!')
	#---------------------------------------------------------------------------
	def edges(self):
	#---------------------------------------------------------------------------
		raise NotImplementedError('subclasses must override toCSG()!')
	#---------------------------------------------------------------------------
	def toCSG(self):
	#---------------------------------------------------------------------------
		for vertex in self.vertices():
			sphere=Sphere(vertex, 1)
			sphere.toCSG()

		for edge in self.edges():
			cylinder = Cylinder(edge[0], edge[1], 1)
			cylinder.toCSG()
#-------------------------------------------------------------------------------
# TODO: class Sierpinsky
# TODO: class Cube
#-------------------------------------------------------------------------------
class Thetraedron(_3DGeometric):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self, first_point, second_point, rotation):
	#---------------------------------------------------------------------------
		self.vertices=[]
		self.vertices.append(first_point)
		self.vertices.append(second_point)
		# TODO: insert transformed points, no cannonical points
		self.vertices.append(Point(0.5, math.sqrt(1.0-math.pow(0.5,2.0)), 0))
		self.vertices.append(Point(0.5, 0.5/math.sqrt(3.0), math.sqrt(2.0/3.0)))
	#---------------------------------------------------------------------------
	def vertices(self):
	#---------------------------------------------------------------------------
		return self.vertices
	#---------------------------------------------------------------------------
	def edges(self):
	#---------------------------------------------------------------------------
		ret=[	self.vertex[0], self.vertex[1],
				self.vertex[1], self.vertex[2],
				self.vertex[2], self.vertex[0],
				self.vertex[0], self.vertex[3],
				self.vertex[1], self.vertex[3],
				self.vertex[2], self.vertex[3] ]
		return ret
#-------------------------------------------------------------------------------
t=Thetraedron(Point(0,0,0), Point(0,1,0), 0)
pprint(getmembers(t))
