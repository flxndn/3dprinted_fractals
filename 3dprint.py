import math
from inspect import getmembers
from pprint import pprint

#-------------------------------------------------------------------------------
class Point:
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self,x,y,z):
	#---------------------------------------------------------------------------
		self.x = x
		self.y = y
		self.z = z
#-------------------------------------------------------------------------------
class _3DPrintable:
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def toCSG(self):
	#---------------------------------------------------------------------------
		raise NotImplementedError('subclasses must override toCSG()!')
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
class Transform:
#-------------------------------------------------------------------------------
	# matrix t
	#---------------------------------------------------------------------------
	def Apply(self, point):
	#---------------------------------------------------------------------------
		x= t[0][0]*point.x + t[0][1]*point.y + t[0][2]*point.z + t[0][3]
		y= t[1][0]*point.x + t[1][1]*point.y + t[1][2]*point.z + t[1][3]
		z= t[2][0]*point.x + t[2][1]*point.y + t[2][2]*point.z + t[2][3]
		return Point(x,y,z)
	#---------------------------------------------------------------------------
	def compound(self, transform):
	#---------------------------------------------------------------------------
		r=Zero();
		
		for i in range(0,4):
			sum = 0
			for j in range(0,4):
				sum = sum + self.t[i][j]*transform[j][i]
			r[i][j]=sum
	#---------------------------------------------------------------------------
	def toString(self):
	#---------------------------------------------------------------------------
		res = "[\n"
		for i in range(0,4):
			for j in range(0,4):
				res = res + str(self.t[i][j])
				res = res + ", "
			res = res + "\n";
		res = res + "]"
		return res
#-------------------------------------------------------------------------------
class Scale(Transform):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self, scale):
	#---------------------------------------------------------------------------
		unity = Unity()
		self.t=unity.t

		self.t[0][0]=scale
		self.t[1][1]=scale
		self.t[2][2]=scale
#-------------------------------------------------------------------------------
class RotateX(Transform):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self, angle):
	#---------------------------------------------------------------------------
		unity = Unity()
		self.t=unity.t

		c = math.cos(angle)
		s = math.sin(angle)

		self.t[1][1]=c
		self.t[1][2]=s
		self.t[2][1]=-s
		self.t[2][2]=c
#-------------------------------------------------------------------------------
class RotateY(Transform):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self, angle):
	#---------------------------------------------------------------------------
		unity = Unity()
		self.t=unity.t

		c = math.cos(angle)
		s = math.sin(angle)

		self.t[0][0]=c
		self.t[0][2]=-s
		self.t[2][0]=s
		self.t[2][2]=c
#-------------------------------------------------------------------------------
class RotateZ(Transform):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self, angle):
	#---------------------------------------------------------------------------
		unity = Unity()
		self.t=unity.t

		c = math.cos(angle)
		s = math.sin(angle)

		self.t[0][0]=c
		self.t[0][1]=s
		self.t[1][0]=-s
		self.t[1][1]=c
#-------------------------------------------------------------------------------
class Displacement(Transform):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self, point):
	#---------------------------------------------------------------------------
		unity = Unity()
		self.t=unity.t
		self.t[0][3]=point.x
		self.t[1][3]=point.y
		self.t[2][3]=point.z
#-------------------------------------------------------------------------------
class Zero(Transform):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self):
	#---------------------------------------------------------------------------
		self.t=[	[0,0,0,0],
					[0,0,0,0],
					[0,0,0,0],
					[0,0,0,0]]
#-------------------------------------------------------------------------------
class Unity(Transform):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self):
	#---------------------------------------------------------------------------
		self.t=[	[1,0,0,0],
					[0,1,0,0],
					[0,0,1,0],
					[0,0,0,1]]
#-------------------------------------------------------------------------------
class Sphere(_3DPrintable):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self,center, radius):
	#---------------------------------------------------------------------------
		self.center = center
		self.radius = radius
	#---------------------------------------------------------------------------
	def toCSG():
	#---------------------------------------------------------------------------
		# TODO
		pass
#-------------------------------------------------------------------------------
class Cylinder(_3DPrintable):
	#---------------------------------------------------------------------------
	def __init__(self,origin, end, radius):
	#---------------------------------------------------------------------------
		self.center = origin
		self.end = end
		self.radius = radius
	#---------------------------------------------------------------------------
	def toCSG():
	#---------------------------------------------------------------------------
		# TODO
		pass
		# cylinder($fn = 0, $fa = 12.000000, $fs = 2.000000, h = 20.0, r1 = 2.0, r2 = 2.0, center = false);
#-------------------------------------------------------------------------------
class _3DGeometric(_3DPrintable):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def vertices(self):
	#---------------------------------------------------------------------------
		raise NotImplementedError('subclasses must override toCSG()!')
	#---------------------------------------------------------------------------
	def edges(self):
	#---------------------------------------------------------------------------
		raise NotImplementedError('subclasses must override toCSG()!')
	#---------------------------------------------------------------------------
	def toCSG(self):
	#---------------------------------------------------------------------------
		for vertex in self.vertices():
			sphere=Sphere(vertex, 1)
			sphere.toCSG()

		for edge in self.edges():
			cylinder = Cylinder(edge[0], edge[1], 1)
			cylinder.toCSG()
#-------------------------------------------------------------------------------
# TODO: class Sierpinsky
# TODO: class Cube
#-------------------------------------------------------------------------------
class Thetraedron(_3DGeometric):
#-------------------------------------------------------------------------------
	#---------------------------------------------------------------------------
	def __init__(self, first_point, second_point, rotation):
	#---------------------------------------------------------------------------
		self.vertices=[]
		self.vertices.append(first_point)
		self.vertices.append(second_point)
		# TODO: insert transformed points, no cannonical points
		self.vertices.append(Point(0.5, math.sqrt(1.0-math.pow(0.5,2.0)), 0))
		self.vertices.append(Point(0.5, 0.5/math.sqrt(3.0), math.sqrt(2.0/3.0)))
	#---------------------------------------------------------------------------
	def vertices(self):
	#---------------------------------------------------------------------------
		return self.vertices
	#---------------------------------------------------------------------------
	def edges(self):
	#---------------------------------------------------------------------------
		ret=[	self.vertex[0], self.vertex[1],
				self.vertex[1], self.vertex[2],
				self.vertex[2], self.vertex[0],
				self.vertex[0], self.vertex[3],
				self.vertex[1], self.vertex[3],
				self.vertex[2], self.vertex[3] ]
		return ret
#-------------------------------------------------------------------------------
t=Thetraedron(Point(0,0,0), Point(0,1,0), 0)
pprint(getmembers(t))

trans=Displacement(Point(2,3,4));
print trans.toString();

trans=RotateX(3.14/4);
print trans.toString();

trans=RotateZ(3.14/4);
print trans.toString();

trans=Scale(8);
print trans.toString();
